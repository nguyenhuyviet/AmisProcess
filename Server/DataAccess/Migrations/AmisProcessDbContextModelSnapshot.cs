// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(AmisProcessDbContext))]
    partial class AmisProcessDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DataAccess.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasName("FK_Employee_User_idx");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("DataAccess.Models.Field", b =>
                {
                    b.Property<int>("FieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Option")
                        .HasColumnType("mediumtext");

                    b.Property<int?>("PhaseId")
                        .HasColumnType("int");

                    b.Property<byte?>("Required")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("FieldId");

                    b.HasIndex("PhaseId")
                        .HasName("FK_Field_Phase_idx");

                    b.ToTable("Field");
                });

            modelBuilder.Entity("DataAccess.Models.Fieldvalue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("FieldId")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessRunningId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("mediumtext");

                    b.HasKey("Id");

                    b.HasIndex("FieldId")
                        .HasName("FK_FieldId_idx");

                    b.HasIndex("ProcessRunningId")
                        .HasName("FK_FieldValue_ProcessRunning_idx");

                    b.ToTable("FieldValue");
                });

            modelBuilder.Entity("DataAccess.Models.Phase", b =>
                {
                    b.Property<int>("PhaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("EmployeeImplement")
                        .HasColumnType("mediumtext");

                    b.Property<string>("EmployeeImplementType")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<byte?>("IsFirstPhase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte?>("IsLastPhase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("ProcessId")
                        .HasColumnType("int");

                    b.Property<int>("Serial")
                        .HasColumnType("int");

                    b.Property<int>("TimeImplement")
                        .HasColumnType("int");

                    b.Property<string>("TimeImplementType")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("PhaseId");

                    b.HasIndex("ProcessId")
                        .HasName("FK_Phase_Process_idx");

                    b.ToTable("Phase");
                });

            modelBuilder.Entity("DataAccess.Models.Process", b =>
                {
                    b.Property<int>("ProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("ProcessId");

                    b.HasIndex("CategoryId")
                        .HasName("FK_Process_ProcessCategory_idx");

                    b.ToTable("Process");
                });

            modelBuilder.Entity("DataAccess.Models.Processcategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.HasKey("CategoryId")
                        .HasName("PRIMARY");

                    b.ToTable("ProcessCategory");
                });

            modelBuilder.Entity("DataAccess.Models.Processrunning", b =>
                {
                    b.Property<int>("ProcessRunningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("EmployeeHandleId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("PhaseId")
                        .HasColumnType("int");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("ProcessRunningId");

                    b.HasIndex("EmployeeId")
                        .HasName("FK_ProcessRunning_Employee_idx");

                    b.HasIndex("PhaseId")
                        .HasName("FK_ProcessRunning_Phase_idx");

                    b.ToTable("ProcessRunning");
                });

            modelBuilder.Entity("DataAccess.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("RoleId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("DataAccess.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("UserId");

                    b.HasIndex("RoleId")
                        .IsUnique()
                        .HasName("RoleId_UNIQUE");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DataAccess.Models.Employee", b =>
                {
                    b.HasOne("DataAccess.Models.User", "User")
                        .WithOne("Employee")
                        .HasForeignKey("DataAccess.Models.Employee", "UserId");
                });

            modelBuilder.Entity("DataAccess.Models.Field", b =>
                {
                    b.HasOne("DataAccess.Models.Phase", "Phase")
                        .WithMany("Field")
                        .HasForeignKey("PhaseId")
                        .HasConstraintName("FK_Field_Phase");
                });

            modelBuilder.Entity("DataAccess.Models.Fieldvalue", b =>
                {
                    b.HasOne("DataAccess.Models.Field", "Field")
                        .WithMany("Fieldvalue")
                        .HasForeignKey("FieldId")
                        .HasConstraintName("FK_FieldValue_Field");

                    b.HasOne("DataAccess.Models.Processrunning", "ProcessRunning")
                        .WithMany("Fieldvalue")
                        .HasForeignKey("ProcessRunningId")
                        .HasConstraintName("FK_FieldValue_ProcessRunning");
                });

            modelBuilder.Entity("DataAccess.Models.Phase", b =>
                {
                    b.HasOne("DataAccess.Models.Process", "Process")
                        .WithMany("Phase")
                        .HasForeignKey("ProcessId")
                        .HasConstraintName("FK_Phase_Process");
                });

            modelBuilder.Entity("DataAccess.Models.Process", b =>
                {
                    b.HasOne("DataAccess.Models.Processcategory", "Category")
                        .WithMany("Process")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Process_ProcessCategory");
                });

            modelBuilder.Entity("DataAccess.Models.Processrunning", b =>
                {
                    b.HasOne("DataAccess.Models.Employee", "Employee")
                        .WithMany("Processrunning")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_ProcessRunning_Employee")
                        .IsRequired();

                    b.HasOne("DataAccess.Models.Phase", "Phase")
                        .WithMany("Processrunning")
                        .HasForeignKey("PhaseId")
                        .HasConstraintName("FK_ProcessRunning_Phase")
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Models.User", b =>
                {
                    b.HasOne("DataAccess.Models.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_User_Role_RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
