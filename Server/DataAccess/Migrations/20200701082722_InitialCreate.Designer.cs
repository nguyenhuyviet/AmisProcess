// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(AmisProcessDbContext))]
    [Migration("20200701082722_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DataAccess.Models.Category", b =>
                {
                    b.Property<byte[]>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(36)")
                        .HasMaxLength(36)
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.HasKey("CategoryId");

                    b.ToTable("category");
                });

            modelBuilder.Entity("DataAccess.Models.Employee", b =>
                {
                    b.Property<byte[]>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(36)")
                        .HasMaxLength(36)
                        .IsUnicode(true);

                    b.Property<string>("Address")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasColumnType("varbinary(36)")
                        .HasMaxLength(36)
                        .IsUnicode(false);

                    b.HasKey("EmployeeId");

                    b.HasIndex("UserId")
                        .HasName("Fk_Employee_User_UserId_idx");

                    b.ToTable("employee");
                });

            modelBuilder.Entity("DataAccess.Models.Field", b =>
                {
                    b.Property<byte[]>("FieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(36)")
                        .HasMaxLength(36)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<byte[]>("PhaseId")
                        .IsRequired()
                        .HasColumnType("varbinary(36)")
                        .HasMaxLength(36)
                        .IsUnicode(false);

                    b.Property<byte?>("Required")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("FieldId");

                    b.HasIndex("PhaseId")
                        .HasName("fk_phase_field_idx");

                    b.ToTable("field");
                });

            modelBuilder.Entity("DataAccess.Models.FieldValue", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(36)")
                        .HasMaxLength(36)
                        .IsUnicode(false);

                    b.Property<byte[]>("FieldId")
                        .IsRequired()
                        .HasColumnType("varbinary(36)")
                        .HasMaxLength(36)
                        .IsUnicode(false);

                    b.Property<byte[]>("ProcessRunningId")
                        .IsRequired()
                        .HasColumnType("varbinary(36)")
                        .HasMaxLength(36)
                        .IsUnicode(false);

                    b.Property<string>("Value")
                        .HasColumnType("mediumtext");

                    b.Property<string>("ValueForCheckBox")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("FieldId")
                        .HasName("fk_field_fieldvalue_idx");

                    b.HasIndex("ProcessRunningId")
                        .HasName("fk_processrunning_fieldvalue_idx");

                    b.ToTable("fieldvalue");
                });

            modelBuilder.Entity("DataAccess.Models.Option", b =>
                {
                    b.Property<byte[]>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(36)")
                        .HasMaxLength(36)
                        .IsUnicode(false);

                    b.Property<byte[]>("FieldId")
                        .IsRequired()
                        .HasColumnType("varbinary(36)")
                        .HasMaxLength(36)
                        .IsUnicode(false);

                    b.Property<string>("Value")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("OptionId");

                    b.HasIndex("FieldId")
                        .HasName("FK_option_field_fieldId_idx");

                    b.ToTable("option");
                });

            modelBuilder.Entity("DataAccess.Models.Phase", b =>
                {
                    b.Property<byte[]>("PhaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(36)")
                        .HasMaxLength(36)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("EmployeeImplement")
                        .HasColumnType("mediumtext");

                    b.Property<string>("EmployeeImplementType")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<byte?>("IsFirstPhase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte?>("IsLastPhase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<byte[]>("ProcessId")
                        .IsRequired()
                        .HasColumnType("varbinary(36)")
                        .HasMaxLength(36)
                        .IsUnicode(false);

                    b.Property<int>("Serial")
                        .HasColumnType("int");

                    b.Property<int?>("TimeImplement")
                        .HasColumnType("int");

                    b.Property<string>("TimeImplementType")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("PhaseId");

                    b.HasIndex("ProcessId")
                        .HasName("FK_phase_process_processId_idx");

                    b.ToTable("phase");
                });

            modelBuilder.Entity("DataAccess.Models.PhaseEmployee", b =>
                {
                    b.Property<byte[]>("PhaseEmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(36)")
                        .HasMaxLength(36)
                        .IsUnicode(false);

                    b.Property<byte[]>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("varbinary(36)")
                        .HasMaxLength(36)
                        .IsUnicode(false);

                    b.Property<byte[]>("PhaseId")
                        .IsRequired()
                        .HasColumnType("varbinary(36)")
                        .HasMaxLength(36)
                        .IsUnicode(false);

                    b.HasKey("PhaseEmployeeId");

                    b.HasIndex("EmployeeId")
                        .HasName("FK_employee_phaseemployee_employeeId_idx");

                    b.HasIndex("PhaseId")
                        .HasName("FK_employee_phaseemployee_phaseId_idx");

                    b.ToTable("phaseemployee");
                });

            modelBuilder.Entity("DataAccess.Models.Process", b =>
                {
                    b.Property<byte[]>("ProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(36)")
                        .HasMaxLength(36)
                        .IsUnicode(false);

                    b.Property<byte[]>("CategoryId")
                        .IsRequired()
                        .HasColumnType("varbinary(36)")
                        .HasMaxLength(36)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("ProcessId");

                    b.HasIndex("CategoryId")
                        .HasName("Fk_category_process_categoryId_idx");

                    b.ToTable("process");
                });

            modelBuilder.Entity("DataAccess.Models.ProcessRunning", b =>
                {
                    b.Property<byte[]>("ProcessRunningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(36)")
                        .HasMaxLength(36)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("EmployeeHandleId")
                        .HasColumnType("varchar(36)")
                        .HasMaxLength(36)
                        .IsUnicode(false);

                    b.Property<byte[]>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("varbinary(36)")
                        .HasMaxLength(36)
                        .IsUnicode(false);

                    b.Property<byte[]>("PhaseId")
                        .IsRequired()
                        .HasColumnType("varbinary(36)")
                        .HasMaxLength(36)
                        .IsUnicode(false);

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("ProcessRunningId");

                    b.HasIndex("EmployeeId")
                        .HasName("Fk_Employee_Processrunning_EmployeeId_idx");

                    b.HasIndex("PhaseId")
                        .HasName("Fk_Phase_Processrunning_PhaseId_idx");

                    b.ToTable("processrunning");
                });

            modelBuilder.Entity("DataAccess.Models.Role", b =>
                {
                    b.Property<byte[]>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(36)")
                        .HasMaxLength(36)
                        .IsUnicode(true);

                    b.Property<string>("RoleName")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("RoleId");

                    b.ToTable("role");
                });

            modelBuilder.Entity("DataAccess.Models.User", b =>
                {
                    b.Property<byte[]>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(36)")
                        .HasMaxLength(36)
                        .IsUnicode(true);

                    b.Property<string>("Password")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<byte[]>("RoleId")
                        .IsRequired()
                        .HasColumnType("varbinary(36)")
                        .HasMaxLength(36)
                        .IsUnicode(false);

                    b.Property<string>("Username")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("UserId");

                    b.HasIndex("RoleId")
                        .HasName("Fk_Role_User_RoleId_idx");

                    b.ToTable("user");
                });

            modelBuilder.Entity("DataAccess.Models.Employee", b =>
                {
                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("Employee")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Fk_Employee_User_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Models.Field", b =>
                {
                    b.HasOne("DataAccess.Models.Phase", "Phase")
                        .WithMany("Field")
                        .HasForeignKey("PhaseId")
                        .HasConstraintName("fk_phase_field")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Models.FieldValue", b =>
                {
                    b.HasOne("DataAccess.Models.Field", "Field")
                        .WithMany("FieldValue")
                        .HasForeignKey("FieldId")
                        .HasConstraintName("fk_field_fieldvalue")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.ProcessRunning", "ProcessRunning")
                        .WithMany("FieldValue")
                        .HasForeignKey("ProcessRunningId")
                        .HasConstraintName("fk_processrunning_fieldvalue")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Models.Option", b =>
                {
                    b.HasOne("DataAccess.Models.Field", "Field")
                        .WithMany("Option")
                        .HasForeignKey("FieldId")
                        .HasConstraintName("FK_option_field_fieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Models.Phase", b =>
                {
                    b.HasOne("DataAccess.Models.Process", "Process")
                        .WithMany("Phase")
                        .HasForeignKey("ProcessId")
                        .HasConstraintName("FK_phase_process_processId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Models.PhaseEmployee", b =>
                {
                    b.HasOne("DataAccess.Models.Employee", "Employee")
                        .WithMany("PhaseEmployee")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_employee_phaseemployee_employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.Phase", "Phase")
                        .WithMany("PhaseEmployee")
                        .HasForeignKey("PhaseId")
                        .HasConstraintName("FK_employee_phaseemployee_phaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Models.Process", b =>
                {
                    b.HasOne("DataAccess.Models.Category", "Category")
                        .WithMany("Process")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("Fk_category_process_categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Models.ProcessRunning", b =>
                {
                    b.HasOne("DataAccess.Models.Employee", "Employee")
                        .WithMany("ProcessRunning")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("Fk_Employee_Processrunning_EmployeeId")
                        .IsRequired();

                    b.HasOne("DataAccess.Models.Phase", "Phase")
                        .WithMany("ProcessRunning")
                        .HasForeignKey("PhaseId")
                        .HasConstraintName("Fk_Phase_Processrunning_PhaseId")
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Models.User", b =>
                {
                    b.HasOne("DataAccess.Models.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("Fk_Role_User_RoleId")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
